name: CI Pipeline - Fail2Ban Dashboard

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Stage 1 - Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python and Ruff
        run: |
          python3 -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff linter
        run: ruff check api/

  build:
    name: Stage 2 - Container Build
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> .env
          echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> $GITHUB_ENV

      - name: Build Docker services
        run: docker compose build

  test:
    name: Stage 3 - Integration Testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> .env
          echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> $GITHUB_ENV

      - name: Start service stack
        run: docker compose up -d --build

      - name: Wait for API health check
        run: |
          attempt=1
          max_attempts=10
          interval=5
          until curl --fail http://0.0.0.0:8000/health || [ $attempt -eq $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Waiting for API to be ready..."
            sleep $interval
            ((attempt++))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "ERROR: API health check failed after $max_attempts attempts"
            docker compose logs
            exit 1
          fi

          echo "API is healthy and ready"

      - name: Verify Loki service
        run: |
          if ! curl --fail http://localhost:3100/ready; then
            echo "ERROR: Loki service is not ready"
            docker compose logs
            exit 1
          fi
          echo "Loki service is ready"

      - name: Display service logs
        run: docker compose logs --no-color
        if: always()
