name: CI Pipeline - Fail2Ban Dashboard

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop, feature/*, fix/*]
  pull_request:
    branches: [main, develop]

env:
  FAIL2BAN_LOG_PATH: /var/tmp/fail2ban.log

jobs:
  lint:
    name: Stage 1 - Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ruff

      - name: Install Ruff
        run: pip install ruff

      - name: Run Ruff linter
        run: |
          ruff check api/ 
          ruff format api/ --check --diff || echo "Code needs formatting"

  build:
    name: Stage 2 - Container Build
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate & create .env
        run: |
          if [ ! -f .env.example ]; then
            echo "ERROR: .env.example not found" && exit 1
          fi
          cp .env.example .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API service with cache
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: false
          tags: fail2ban-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build remaining services
        run: docker compose build
        env:
          DOCKER_BUILDKIT: 1

  test:
    name: Stage 3 - Integration Testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> $GITHUB_ENV

      - name: Start service stack
        run: docker compose up -d --build

      - name: Diagnóstico de volúmenes
        run: |
          echo "--- Diagnóstico de Docker ---"
          docker compose ps
          docker compose config | grep FAIL2BAN_LOG_PATH
          docker exec promtail ls -la ${{ env.FAIL2BAN_LOG_PATH }} || echo "No se pudo acceder al archivo dentro de promtail"
          docker exec promtail cat /etc/promtail/promtail.yaml | grep FAIL2BAN_LOG_PATH

          # Verificar que el archivo sigue existiendo
          ls -la ${{ env.FAIL2BAN_LOG_PATH }} || echo "El archivo ya no existe en el host"

      - name: Wait for API health check
        run: |
          MAX_ATTEMPTS=15
          INTERVAL=10

          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            if curl --fail --silent --max-time 10 http://localhost:8000/health; then
              echo "✅ API is healthy (attempt $attempt/$MAX_ATTEMPTS)"
              exit 0
            fi
            
            echo "⏳ Attempt $attempt/$MAX_ATTEMPTS failed, retrying in ${INTERVAL}s..."
            if [ $attempt -eq $MAX_ATTEMPTS ]; then
              echo "❌ API health check failed after $MAX_ATTEMPTS attempts"
              docker compose logs api
              exit 1
            fi
            sleep $INTERVAL
          done

      - name: Verify Loki service health
        run: |
          echo "🔍 Verifying Loki service..."

          # Wait for Loki to be ready
          for i in {1..30}; do
            if curl --fail --silent --max-time 5 http://localhost:3100/ready; then
              echo "✅ Loki is ready"
              break
            fi
            echo "⏳ Waiting for Loki... ($i/30)"
            sleep 2
          done

          # Verify API endpoints
          echo "🧪 Testing Loki endpoints..."
          curl --fail http://localhost:3100/metrics > /dev/null || exit 1
          curl --fail http://localhost:3100/loki/api/v1/status/buildinfo > /dev/null || exit 1
          echo "✅ All Loki endpoints responding"

      - name: Display service logs
        run: docker compose logs --no-color
        if: always()

  unit-tests:
    name: Stage 4 - Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('api/requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install pytest pytest-asyncio pytest-cov

      - name: Set environment variables for tests
        run: |
          echo "LOKI_QUERY_URL=http://test-loki:3100/api/v1/query_range" >> $GITHUB_ENV

      - name: Run unit tests with coverage
        run: |
          cd api
          PYTHONPATH=. python -m pytest tests/ -v --tb=short --cov=. --cov-report=html --cov-report=term --cov-report=json --cov-fail-under=60
        env:
          LOKI_QUERY_URL: http://test-loki:3100/api/v1/query_range

      - name: Coverage comment
        id: coverage
        run: |
          cd api
          # Extraer porcentaje de cobertura del archivo JSON
          COVERAGE=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered_display'])")
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

          # Crear reporte para comentario
          echo "## 📊 Reporte de Cobertura de Código" > coverage_comment.md
          echo "" >> coverage_comment.md
          echo "**Cobertura total: $COVERAGE%**" >> coverage_comment.md
          echo "" >> coverage_comment.md

          if (( $(echo "$COVERAGE >= 60" | bc -l) )); then
            echo "✅ **OBJETIVO CUMPLIDO** - Cobertura mínima del 60% alcanzada" >> coverage_comment.md
          else
            echo "❌ **OBJETIVO NO CUMPLIDO** - Se requiere mínimo 60% de cobertura" >> coverage_comment.md
          fi

          echo "" >> coverage_comment.md
          echo "📈 **Detalles:**" >> coverage_comment.md
          echo "\`\`\`" >> coverage_comment.md
          python -m coverage report --format=text >> coverage_comment.md
          echo "\`\`\`" >> coverage_comment.md
          echo "" >> coverage_comment.md
          echo "🔗 [Ver reporte completo en artefactos](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> coverage_comment.md

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('api/coverage_comment.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverage
            });

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: |
            api/htmlcov/
            api/coverage.json
            api/coverage_comment.md

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: api/test-results.xml

  # security-scan:
  #   name: Stage 5 - Security Scans
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Create environment file
  #       run: |
  #         cp .env.example .env
  #         echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> .env

  #     - name: Build API image for scanning
  #       run: docker build -t fail2ban-api:latest ./api

  #     - name: pip-audit
  #       run: |
  #         pip install pip-audit
  #         pip-audit -r api/requirements.txt

  #     - name: Docker image scan (Trivy)
  #       uses: aquasecurity/trivy-action@0.24.0
  #       with:
  #         image-ref: "fail2ban-api:latest"
  #         format: "table"
  #         exit-code: "1"

  integration-check:
    name: Stage 5 - Integration Flow Test
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment and mock log
        run: |
          cp .env.example .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env

          # Verificar el directorio
          mkdir -p $(dirname ${{ env.FAIL2BAN_LOG_PATH }})
          ls -la $(dirname ${{ env.FAIL2BAN_LOG_PATH }})

          # Crear el archivo de log y verificar
          echo 'May 24 19:00:00 server fail2ban[1234]: INFO [sshd] Starting' > ${{ env.FAIL2BAN_LOG_PATH }}
          cat ${{ env.FAIL2BAN_LOG_PATH }}
          ls -la ${{ env.FAIL2BAN_LOG_PATH }}

          # Mostrar el valor actual de la variable
          echo "Log path: ${{ env.FAIL2BAN_LOG_PATH }}"

          # Verificar contenido del .env
          echo "--- Contenido de .env ---"
          cat .env

      - name: Start service stack
        run: docker compose up -d --build

      - name: Inject synthetic log line
        run: |
          echo '2025-05-26 19:00:00,123 fail2ban.filter [1234]: INFO [sshd] Starting' > ${{ env.FAIL2BAN_LOG_PATH }}
          echo '2025-05-26 20:00:00,123 fail2ban.filter [1234]: NOTICE [sshd] Ban 1.2.3.4' >> ${{ env.FAIL2BAN_LOG_PATH }}
          cat ${{ env.FAIL2BAN_LOG_PATH }}

      - name: Wait for API health check
        run: |
          attempt=1
          max_attempts=10
          until curl --fail http://localhost:8000/health || [ $attempt -eq $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Waiting for API to be ready..."
            sleep 5
            ((attempt++))
          done

      - name: Check log via API
        run: |
          sleep 10
          echo "--- Verificación de logs en API ---"

          # Verificar estado de Loki/Promtail
          docker exec promtail ps aux | grep promtail
          docker exec loki ps aux | grep loki

          # Consultar API directamente
          curl -v "http://localhost:8000/health"

          # Consultar los logs y verificar respuesta
          response=$(curl --fail "http://localhost:8000/fail2ban/logs?limit=10")
          echo "Respuesta API:"
          echo "$response" | jq .
          echo "$response" | grep -q "1.2.3.4" || (echo "Expected IP not found in logs" && exit 1)

          # Verificar logs en Loki directamente
          echo "--- Consultando Loki directamente ---"
          curl -s "http://localhost:3100/loki/api/v1/query_range?query=%7Bjob%3D%22fail2ban%22%7D&limit=10" | jq .

      - name: Debug on failure
        if: failure()
        run: docker compose logs

  cleanup:
    name: Stage 6 - Cleanup
    needs: [unit-tests, integration-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> $GITHUB_ENV

      - name: Teardown Docker
        run: docker compose down -v --remove-orphans --rmi local

  notify-jira:
    name: Stage 7 - Notify Jira
    environment: JIRA
    needs: [cleanup, lint, build, test, unit-tests, integration-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Jira variables
        env:
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          missing_vars=""
          for var in JIRA_USER_EMAIL JIRA_API_TOKEN JIRA_PROJECT_KEY JIRA_BASE_URL; do
            if [ -z "${!var}" ]; then
              missing_vars="$missing_vars $var"
            fi
          done
          if [ -n "$missing_vars" ]; then
            echo "ERROR: Missing Jira secrets:$missing_vars"
            exit 1
          fi
          echo "✅ All Jira secrets are configured"

      - name: Notify Jira with CI report
        env:
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT_KEY: ${{ secrets.JIRA_PROJECT_KEY }}
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
        run: |
          # Determinar el estado del pipeline basado en todos los jobs
          if [[ "${{ needs.lint.result }}" == "success" && \
                "${{ needs.build.result }}" == "success" && \
                "${{ needs.test.result }}" == "success" && \
                "${{ needs.unit-tests.result }}" == "success" && \
                "${{ needs.integration-check.result }}" == "success" && \
                "${{ needs.cleanup.result }}" == "success" ]]; then
            STATUS="✅ EXITOSO"
            echo "✅ Pipeline completado exitosamente"
          else
            STATUS="❌ FALLIDO" 
            echo "❌ Pipeline falló - Revisar etapas individuales"
            echo "Estados: lint=${{ needs.lint.result }}, build=${{ needs.build.result }}, test=${{ needs.test.result }}, unit-tests=${{ needs.unit-tests.result }}, integration-check=${{ needs.integration-check.result }}, cleanup=${{ needs.cleanup.result }}"
          fi

          # Crear descripción detallada
          curl -X POST -u "$JIRA_USER_EMAIL:$JIRA_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data '{
              "fields": {
                "project": { "key": "'"$JIRA_PROJECT_KEY"'" },
                "summary": "CI Pipeline '"$STATUS"' - '"${{ github.workflow }}"' en '"${{ github.ref_name }}"'",
                "description": {
                  "type": "doc",
                  "version": 1,
                  "content": [
                    {
                      "type": "heading",
                      "attrs": { "level": 2 },
                      "content": [
                        {
                          "type": "text",
                          "text": "Resumen del Pipeline"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Estado: '"$STATUS"'"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Rama: '"${{ github.ref_name }}"'"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Evento: '"${{ github.event_name }}"'"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Commit: '"${{ github.sha }}"'"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Autor: '"${{ github.actor }}"'"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Mensaje del commit: '"${{ github.event.head_commit.message }}"'"
                        }
                      ]
                    },
                    {
                      "type": "heading",
                      "attrs": { "level": 3 },
                      "content": [
                        {
                          "type": "text",
                          "text": "Etapas del Pipeline"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "✅ Stage 1 - Code Quality Check (Lint)"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "'"${{ needs.build.result == 'success' && '✅' || '❌' }}"' Stage 2 - Container Build"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "'"${{ needs.test.result == 'success' && '✅' || '❌' }}"' Stage 3 - Integration Testing"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "'"${{ needs.unit-tests.result == 'success' && '✅' || '❌' }}"' Stage 4 - Unit Tests"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "'"${{ needs.integration-check.result == 'success' && '✅' || '❌' }}"' Stage 5 - Integration Flow Test"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "'"${{ needs.cleanup.result == 'success' && '✅' || '❌' }}"' Stage 6 - Cleanup"
                        }
                      ]
                    },
                    {
                      "type": "heading",
                      "attrs": { "level": 3 },
                      "content": [
                        {
                          "type": "text",
                          "text": "Enlaces"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Ver pipeline: "
                        },
                        {
                          "type": "text",
                          "text": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'",
                          "marks": [
                            {
                              "type": "link",
                              "attrs": {
                                "href": "'"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"'"
                              }
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "content": [
                        {
                          "type": "text",
                          "text": "Ver commit: "
                        },
                        {
                          "type": "text",
                          "text": "'"${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"'",
                          "marks": [
                            {
                              "type": "link",
                              "attrs": {
                                "href": "'"${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"'"
                              }
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "issuetype": { "name": "Task" },
                "labels": [ 
                  "ci-pipeline", 
                  "fail2ban-dashboard", 
                  "'"${{ github.ref_name }}"'",
                  "'"${{ github.event_name }}"'"
                ]
              }
            }' \
            "$JIRA_BASE_URL/rest/api/3/issue"
