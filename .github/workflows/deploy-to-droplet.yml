name: CD Deploy to Droplet

# Se activa cuando hay un push a las ramas permitidas
on:
  push:
    branches:
      - develop
      - feature/auth
      - main  # Agrega todas las ramas desde las que quieres poder activar

jobs:
  deploy:
    name: Deploy Application to DigitalOcean Droplet
    runs-on: ubuntu-latest

    steps:
      - name: Validate and Set Deployment Branch
        run: |
          echo "üöÄ DEPLOYMENT CONFIGURATION:"
          echo "üìù Triggered from branch: ${{ github.ref_name }}"
          echo "üéØ Target deployment branch: ${{ secrets.DEPLOY_BRANCH_NAME }}"
          
          # Validar que el secret existe
          if [ -z "${{ secrets.DEPLOY_BRANCH_NAME }}" ]; then
            echo "‚ùå Error: DEPLOY_BRANCH_NAME secret is not configured"
            exit 1
          fi
          
          # Mostrar informaci√≥n del deployment
          echo "‚úÖ Will deploy branch: ${{ secrets.DEPLOY_BRANCH_NAME }}"
          echo "üñ•Ô∏è  To droplet: ${{ secrets.DROPLET_IP }}"
          echo "================================"

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DROPLET_SSH_PRIVATE_KEY }}

      - name: Deploy to Droplet via SSH
        run: |
          echo "Connecting to Droplet: ${{ secrets.DROPLET_IP }}"
          echo "Triggered from branch: ${{ github.ref_name }}"
          echo "Deploying branch: ${{ secrets.DEPLOY_BRANCH_NAME }}"
          
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.DROPLET_SSH_PORT || 22 }} \
            ${{ secrets.DROPLET_SSH_USER }}@${{ secrets.DROPLET_IP }} << 'EOF'

            # Usar la rama del secret en lugar de la rama que dispar√≥ el workflow
            DEPLOY_BRANCH="${{ secrets.DEPLOY_BRANCH_NAME }}"
            TRIGGERED_FROM="${{ github.ref_name }}"
            
            echo ">>> Deployment Information:"
            echo ">>> Triggered from branch: $TRIGGERED_FROM"
            echo ">>> Deploying branch: $DEPLOY_BRANCH"

            # Validar que la rama no est√© vac√≠a
            if [ -z "$DEPLOY_BRANCH" ]; then
              echo "‚ùå Error: DEPLOY_BRANCH is empty or not set"
              exit 1
            fi

            echo ">>> Navigating to project directory: ${{ secrets.PROJECT_PATH_ON_DROPLET }}"
            cd ${{ secrets.PROJECT_PATH_ON_DROPLET }} || { echo "Failed to cd into project directory"; exit 1; }

            echo ">>> Checking available branches..."
            git branch -a

            echo ">>> Ensuring current branch is correct ($DEPLOY_BRANCH) and pulling latest changes..."
            # Verificar en qu√© rama estamos actualmente
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
            echo ">>> Current branch: $CURRENT_BRANCH"
            
            if [ "$CURRENT_BRANCH" != "$DEPLOY_BRANCH" ]; then
              echo "Warning: Not on $DEPLOY_BRANCH branch, currently on $CURRENT_BRANCH. Attempting to switch."
              
              # Verificar si la rama existe localmente
              if git show-ref --verify --quiet refs/heads/$DEPLOY_BRANCH; then
                echo ">>> Branch $DEPLOY_BRANCH exists locally, checking out..."
                git checkout $DEPLOY_BRANCH || { echo "Failed to checkout $DEPLOY_BRANCH branch"; exit 1; }
              else
                echo ">>> Branch $DEPLOY_BRANCH doesn't exist locally, fetching from origin..."
                git fetch origin || { echo "Failed to fetch from origin"; exit 1; }
                git checkout -b $DEPLOY_BRANCH origin/$DEPLOY_BRANCH || { echo "Failed to checkout $DEPLOY_BRANCH branch from origin"; exit 1; }
              fi
            fi
            
            # Actualizar la rama con los √∫ltimos cambios
            git pull origin $DEPLOY_BRANCH || { echo "Failed to pull changes from $DEPLOY_BRANCH"; exit 1; }

            echo ">>> Updating and restarting Docker services..."
            # Actualizar las im√°genes de Docker
            docker compose pull || echo "Docker compose pull failed, continuing..."
            # Reconstruir y reiniciar los servicios
            docker compose up -d --build --force-recreate --remove-orphans || { echo "Docker compose up failed"; exit 1; }

            echo ">>> Deployment to Droplet finished successfully!"
            echo ">>> Deployed branch: $DEPLOY_BRANCH (triggered from: