name: Tests with Authentication

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-with-auth:
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
          MONGO_INITDB_DATABASE: test_db
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up environment variables
      working-directory: ./api
      run: |
        echo "SECRET_KEY=test_secret_key_for_jwt_github_actions" >> $GITHUB_ENV
        echo "ALGORITHM=HS256" >> $GITHUB_ENV
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=30" >> $GITHUB_ENV
        echo "MONGODB_URI=mongodb://admin:password@localhost:27017/test_db?authSource=admin" >> $GITHUB_ENV

    - name: Wait for MongoDB to be ready
      run: |
        timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'

    - name: Create admin user in database
      working-directory: ./api
      run: |
        python -c "
        import asyncio
        import motor.motor_asyncio
        import os
        from passlib.context import CryptContext

        async def create_admin():
            client = motor.motor_asyncio.AsyncIOMotorClient(os.getenv('MONGODB_URI'))
            db = client['test_db']
            users_collection = db['users']
            
            existing_admin = await users_collection.find_one({'username': 'admin'})
            if existing_admin:
                print('Admin user already exists')
                return
            
            pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')
            hashed_password = pwd_context.hash('password')
            
            admin_user = {
                'username': 'admin',
                'email': 'admin@test.com',
                'hashed_password': hashed_password,
                'roles': ['ADMIN']
            }
            
            result = await users_collection.insert_one(admin_user)
            print(f'Created admin user with ID: {result.inserted_id}')
            client.close()

        asyncio.run(create_admin())
        "

    - name: Start API server in background
      working-directory: ./api
      run: |
        uvicorn main:app --host 0.0.0.0 --port 8000 &
        echo $! > api.pid
        sleep 10

    - name: Verify API is running
      run: |
        curl -f http://localhost:8000/docs || exit 1

    - name: Test admin login
      working-directory: ./api
      run: |
        python -c "
        import requests
        
        response = requests.post(
            'http://localhost:8000/auth/login',
            json={'username': 'admin', 'password': 'password'},
            timeout=10
        )
        
        if response.status_code == 200:
            token_data = response.json()
            print('✅ Admin login successful')
            with open('admin_token.txt', 'w') as f:
                f.write(token_data.get('access_token', ''))
        else:
            print(f'❌ Login failed: {response.status_code}')
            exit(1)
        "

    - name: Run authentication tests
      working-directory: ./api
      run: |
        pytest tests/controller_tests/auth_flow_test.py -v

    - name: Run all controller tests with authentication
      working-directory: ./api
      run: |
        pytest tests/controller_tests/users_test.py -v
        pytest tests/controller_tests/jails_test.py -v  
        pytest tests/controller_tests/logs_test.py -v

    - name: Run service tests
      working-directory: ./api
      run: |
        pytest tests/service_tests/ -v

    - name: Run all tests with coverage
      working-directory: ./api
      run: |
        pytest tests/ --cov=controllers --cov=services --cov-report=xml -v

    - name: Stop API server
      working-directory: ./api
      run: |
        if [ -f api.pid ]; then
          kill $(cat api.pid) || true
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./api/coverage.xml
        fail_ci_if_error: false
