name: CI Pipeline - Fail2Ban Dashboard

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

env:
  FAIL2BAN_LOG_PATH: /var/tmp/fail2ban.log

jobs:
  lint:
    name: Stage 1 - Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-ruff

      - name: Install Ruff
        run: pip install ruff

      - name: Run Ruff linter
        run: |
          ruff check api/ 
          ruff format api/ --check --diff || echo "Code needs formatting"

  build:
    name: Stage 2 - Container Build
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate & create .env
        run: |
          if [ ! -f .env.example ]; then
            echo "ERROR: .env.example not found" && exit 1
          fi
          cp .env.example .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build API service with cache
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: false
          tags: fail2ban-api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build remaining services
        run: docker compose build
        env:
          DOCKER_BUILDKIT: 1

  test:
    name: Stage 3 - Integration Testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> $GITHUB_ENV

      - name: Start service stack
        run: docker compose up -d --build

      - name: Wait for API health check
        run: |
          MAX_ATTEMPTS=15
          INTERVAL=10

          for attempt in $(seq 1 $MAX_ATTEMPTS); do
            if curl --fail --silent --max-time 10 http://localhost:8000/health; then
              echo "✅ API is healthy (attempt $attempt/$MAX_ATTEMPTS)"
              exit 0
            fi
            
            echo "⏳ Attempt $attempt/$MAX_ATTEMPTS failed, retrying in ${INTERVAL}s..."
            if [ $attempt -eq $MAX_ATTEMPTS ]; then
              echo "❌ API health check failed after $MAX_ATTEMPTS attempts"
              docker compose logs api
              exit 1
            fi
            sleep $INTERVAL
          done

      - name: Verify Loki service health
        run: |
          echo "🔍 Verifying Loki service..."

          # Wait for Loki to be ready
          for i in {1..30}; do
            if curl --fail --silent --max-time 5 http://localhost:3100/ready; then
              echo "✅ Loki is ready"
              break
            fi
            echo "⏳ Waiting for Loki... ($i/30)"
            sleep 2
          done

          # Verify API endpoints
          echo "🧪 Testing Loki endpoints..."
          curl --fail http://localhost:3100/metrics > /dev/null || exit 1
          curl --fail http://localhost:3100/loki/api/v1/status/buildinfo > /dev/null || exit 1
          echo "✅ All Loki endpoints responding"

      - name: Display service logs
        run: docker compose logs --no-color
        if: always()

  unit-tests:
    name: Stage 4 - Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python environment
        run: |
          python3 -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install pytest

      - name: Run unit tests
        run: |
          cd api
          PYTHONPATH=. pytest tests -q

  # security-scan:
  #   name: Stage 5 - Security Scans
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: Create environment file
  #       run: |
  #         cp .env.example .env
  #         echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> .env

  #     - name: Build API image for scanning
  #       run: docker build -t fail2ban-api:latest ./api

  #     - name: pip-audit
  #       run: |
  #         pip install pip-audit
  #         pip-audit -r api/requirements.txt

  #     - name: Docker image scan (Trivy)
  #       uses: aquasecurity/trivy-action@0.24.0
  #       with:
  #         image-ref: "fail2ban-api:latest"
  #         format: "table"
  #         exit-code: "1"

  integration-check:
    name: Stage 5 - Integration Flow Test
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment and mock log
        run: |
          cp .env.example .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env
          echo 'May 24 19:00:00 server fail2ban[1234]: INFO [sshd] Starting' > ${{ env.FAIL2BAN_LOG_PATH }}

      - name: Start service stack
        run: docker compose up -d --build

      - name: Inject synthetic log line
        run: |
          echo 'May 24 20:00:00 server fail2ban[1234]: NOTICE [sshd] Ban 1.2.3.4' >> ${{ env.FAIL2BAN_LOG_PATH }}

      - name: Wait for API health check
        run: |
          attempt=1
          max_attempts=10
          until curl --fail http://localhost:8000/health || [ $attempt -eq $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Waiting for API to be ready..."
            sleep 5
            ((attempt++))
          done

      - name: Check log via API
        run: |
          sleep 10
          response=$(curl --fail "http://localhost:8000/fail2ban/logs?limit=10")
          echo "$response" | jq .
          echo "$response" | grep -q "1.2.3.4" || (echo "Expected IP not found in logs" && exit 1)

      - name: Debug on failure
        if: failure()
        run: docker compose logs

  save-artifacts:
    name: Stage 6 - Save Reports & Logs
    needs: [unit-tests, integration-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> $GITHUB_ENV

      - name: Collect logs
        run: docker compose logs --no-color > logs.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: service-logs
          path: logs.txt

  cleanup:
    name: Stage 7 - Cleanup
    needs: [save-artifacts]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> .env
          echo "FAIL2BAN_LOG_PATH=${{ env.FAIL2BAN_LOG_PATH }}" >> $GITHUB_ENV

      - name: Teardown Docker
        run: docker compose down -v --remove-orphans --rmi local
