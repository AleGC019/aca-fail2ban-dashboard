name: CI Pipeline - Fail2Ban Dashboard

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Stage 1 - Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python and Ruff
        run: |
          python3 -m pip install --upgrade pip
          pip install ruff

      - name: Run Ruff linter
        run: ruff check api/

  build:
    name: Stage 2 - Container Build
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> .env
          echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> $GITHUB_ENV

      - name: Build Docker services
        run: docker compose build

  test:
    name: Stage 3 - Integration Testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create environment file
        run: |
          cp .env.example .env || echo "No .env.example found, creating new .env file"
          echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> .env
          echo "FAIL2BAN_LOG_PATH=/tmp/fail2ban.log" >> $GITHUB_ENV

      - name: Start service stack
        run: docker compose up -d --build

      - name: Wait for API health check
        run: |
          attempt=1
          max_attempts=10
          interval=5
          until curl --fail http://0.0.0.0:8000/health || [ $attempt -eq $max_attempts ]; do
            echo "Attempt $attempt/$max_attempts: Waiting for API to be ready..."
            sleep $interval
            ((attempt++))
          done

          if [ $attempt -eq $max_attempts ]; then
            echo "ERROR: API health check failed after $max_attempts attempts"
            docker compose logs
            exit 1
          fi

          echo "API is healthy and ready"

      - name: Verify Loki service
        run: |
          echo "Waiting for Loki service to be ready..."
          sleep 15

          if curl --fail -s http://localhost:3100/ready > /dev/null; then
            echo "Loki reports ready via /ready endpoint"
          elif curl --fail -s http://localhost:3100/metrics > /dev/null; then
            echo "Loki metrics endpoint responding, service appears to be running"
          elif curl --fail -s http://localhost:3100/loki/api/v1/status/buildinfo > /dev/null; then
            echo "Loki API responding, service appears to be running"
          else
            echo "ERROR: Loki service is not responding to any health checks"
            echo "Loki response to /ready:"
            curl -v http://localhost:3100/ready || true
            echo "Loki logs:"
            docker compose logs loki
            exit 1
          fi

          echo "Loki service is operational"

      - name: Display service logs
        run: docker compose logs --no-color
        if: always()

  unit-tests:
    name: Stage 4 - Unit Tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Python environment
        run: |
          python3 -m pip install --upgrade pip
          pip install -r api/requirements.txt
          pip install pytest

      - name: Run unit tests
        run: |
          cd api
          PYTHONPATH=. pytest tests -q

  security-scan:
    name: Stage 5 - Security Scans
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: pip-audit
        run: |
          pip install pip-audit
          pip-audit -r api/requirements.txt

      - name: Docker image scan (Trivy)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "your-api-image-name:latest"
          format: "table"
          exit-code: "1"

  integration-check:
    name: Stage 6 - Integration Flow Test
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Inject synthetic log line
        run: |
          echo 'May 24 20:00:00 server fail2ban[1234]: NOTICE [sshd] Ban 1.2.3.4' >> /tmp/fail2ban.log

      - name: Check log via API
        run: |
          sleep 5
          curl --fail http://localhost:8000/fail2ban-logs | grep "1.2.3.4"

      - name: Debug on failure
        if: failure()
        run: docker compose logs

  save-artifacts:
    name: Stage 7 - Save Reports & Logs
    needs: [unit-tests, integration-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Collect logs
        run: docker compose logs --no-color > logs.txt

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: service-logs
          path: logs.txt

  cleanup:
    name: Stage 8 - Cleanup
    needs: [save-artifacts]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Remove containers and volumes
        run: docker compose down -v --remove-orphans
